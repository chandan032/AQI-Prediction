# -*- coding: utf-8 -*-
"""decision-tree-regressor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ywamOLdf_iRDgjIjMZlO71tDdAeZ8Ats
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

combined_data = pd.read_csv('cleaned_data.csv')

combined_data.head()

X = combined_data.iloc[:, :-1]
y = combined_data.iloc[:, -1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=43)

"""## DECISION TREE REGRESSOR"""

from sklearn.tree import DecisionTreeRegressor
tree = DecisionTreeRegressor(criterion='mse')
tree.fit(X_train, y_train)

f'Coefficient of determination R^2 on train set {tree.score(X_train, y_train)}'
# must be close to 1, 1 is perfect fit

f'Coefficient of determination R^2 on test set {tree.score(X_test, y_test)}'

"""### OVERFIT MODEL"""

from sklearn.model_selection import cross_val_score
score = cross_val_score(tree, X, y, cv = 3)

score.mean()

"""#### TREE VISUALIZATION"""

from IPython.display import Image
from sklearn.tree import export_graphviz
import pydotplus

# Create DOT data
dot_data = export_graphviz(tree, out_file=None, 
                                feature_names=X.columns,  
                                class_names=y.index)
# Draw graph
graph = pydotplus.graph_from_dot_data(dot_data)
# Show graph
Image(graph.create_png())

graph.write_png("d-tree.png")

pred = tree.predict(X_test)

sns.distplot(y_test - pred)

"""#### HYPERPARAMETER TUNING"""

params = {
    'splitter': ['best', 'random'],
    'max_depth': [3, 4, 5, 6, 8, 10, 12, 15],
    'min_samples_leaf': list(range(1,6)),
    'min_weight_fraction_leaf': [i/10 for i in range(1, 5)],
    'max_features': ['auto', 'log2', 'sqrt', None],
    'max_leaf_nodes': [None, 10, 20, 30, 40, 50, 60, 70]
}

from sklearn.model_selection import GridSearchCV
search = GridSearchCV(tree, params, scoring='neg_mean_squared_error', cv=5)
search.fit(X,y)

search.best_params_

search.best_score_

pred = search.predict(X_test)
sns.distplot(y_test-pred)

from sklearn import metrics
print(f"Mean Abs Error: {metrics.mean_absolute_error(y_test, pred)}")
print(f"Mean Sq Error: {metrics.mean_squared_error(y_test, pred)}")
print(f"Root Mean Error: {np.sqrt(metrics.mean_squared_error(y_test, pred))}")

search.best_estimator_

# Create DOT data
dot_data = export_graphviz(search.best_estimator_, out_file=None, 
                                feature_names=X.columns,  
                                class_names=y.index)
# Draw graph
graph = pydotplus.graph_from_dot_data(dot_data)
# Show graph
Image(graph.create_png())
graph.write_png("d-tree-optimized.png")

import pickle
pickle.dump(search, open('d-tree.pkl', 'wb'))